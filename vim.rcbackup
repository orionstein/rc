syntax on
set t_Co=256
set nocompatible
filetype off

" Vundle "
set rtp+=~/.vim/bundle/Vundle.vim/
call vundle#begin()
Plugin 'gmarik/Vundle.vim'

" Navigation "
Plugin 'kien/ctrlp.vim'
Plugin 'christoomey/vim-tmux-navigator'
Plugin 'benmills/vimux'
Plugin 'tpope/vim-vinegar'
Plugin 'Lokaltog/vim-easymotion'

" Color "
Plugin 'godlygeek/csapprox'
Plugin 'ap/vim-css-color'
Plugin 'flazz/vim-colorschemes'
Plugin 'mhartington/oceanic-next'

" Search "
Plugin 'rking/ag.vim'
Plugin 'wincent/command-t'
Plugin 'burke/matcher'

" Utilities "
" Plugin 'mhinz/vim-startify' "
Plugin 'w0rp/ale'
Plugin 'elmcast/elm-vim'
Plugin 'sjl/gundo.vim'
Plugin 'tpope/vim-fugitive'
Plugin 'gregsexton/gitv'
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
Plugin 'vim-scripts/gitignore'
Plugin 'airblade/vim-gitgutter'
Plugin 'tmux-plugins/vim-tmux-focus-events'
Plugin 'edkolev/tmuxline.vim'
Plugin 'tpope/vim-obsession'
Plugin 'editorconfig/editorconfig-vim'
Plugin 'flowtype/vim-flow'
Plugin 'jceb/vim-orgmode'

" Editing "
Plugin 'tpope/vim-repeat'
" Plugin 'tpope/vim-sensible' "
Plugin 'tpope/vim-unimpaired'
" Plugin 'Valloric/YouCompleteMe' "
Plugin 'myint/syntastic-extras'
" Plugin 'nathanaelkane/vim-indent-guides'
Plugin 'tomtom/tcomment_vim'
" Plugin 'terryma/vim-multiple-cursors' "
Plugin 'dodie/vim-disapprove-deep-indentation'
Plugin 'Shougo/deoplete.nvim'

" Tag Support "
Plugin 'vim-scripts/taglist.vim'
Plugin 'tmhedberg/matchit'
Plugin 'sbdchd/neoformat'
Plugin 'jiangmiao/auto-pairs'

" Language support "
Plugin 'othree/html5.vim'
Plugin 'vim-ruby/vim-ruby'
Plugin 'vim-scripts/VimClojure'
Plugin 'kchmck/vim-coffee-script'
Plugin 'cakebaker/scss-syntax.vim'
Plugin 'moll/vim-node'
Plugin 'pangloss/vim-javascript'
Plugin 'othree/yajs.vim'
Plugin 'mxw/vim-jsx'
Plugin 'elixir-lang/vim-elixir'
" Plugin 'othree/javascript-libraries-syntax.vim' "
" Plugin 'burnettk/vim-angular' "
Plugin 'elzr/vim-json'
Plugin 'millermedeiros/vim-esformatter'
Plugin 'marijnh/tern_for_vim'
Plugin 'sidorares/node-vim-debugger'
Plugin 'ekalinin/Dockerfile.vim'
Plugin 'leafgarland/typescript-vim'
Plugin 'rust-lang/rust.vim'
Plugin 'mustache/vim-mustache-handlebars'
Plugin 'tomlion/vim-solidity'
Plugin 'carlitux/deoplete-ternjs'

call vundle#end()

set t_Co=256
let g:rehash256 = 1 "

set background=dark
colorscheme bvemu

" hide the gui menubar "
if has('gui_running')
  set guioptions=egmr
  if has("mac")
    set guifont=Menlo\ for\ Powerline:h11
  else
    set guifont=Menlo\ for\ Powerline\ 10
  endif
endif

"Code handling "
syntax on
filetype plugin indent on
set title                " change the terminal's title "

"viminfo"
" set viminfo='50,%,<1000,s100,:20,n~/.vim/viminfo "
set showcmd

"Search help "
set incsearch ignorecase hlsearch
set autoread
set smartcase
set magic
set showmatch
set mat=2
set ai
set si
set wrap
set nu

"Compatibility "
set encoding=utf8
set shiftwidth=2 softtabstop=2 tabstop=2
"set smarttab " "use a mix of tabs and spaces"
set expandtab "always use spaces"

"Remove extra files "
set nobackup
set nowb
set noswapfile

"Contingencies "
set history=10000         " remember more commands and search history "
set undolevels=10000      " use many muchos levels of undo "
set wildignore=*.swp,*.bak,*.pyc,*.class
set hidden "Save buffers instead of closing "

"Fix annoying "
set visualbell           " don't beep "
set noerrorbells         " don't beep "
set pastetoggle=<F2>

"Quicker command entry "
nnoremap ; :

"Customization and plugin mapping "
let mapleader=","

"Ctrlp "
noremap <Leader>b <ESC>:CtrlPBuffer<CR>
noremap <Leader><SPACE> <ESC>:CtrlPMRUFiles<CR>
let g:ctrlp_working_path_mode = 'ra'
let g:ctrlp_use_caching = 0
let g:ctrlp_custom_ignore = '\v[\/](_build|(\.(git|hg|svn)))$'
let g:ctrlp_max_depth = 10
let g:ctrlp_max_files = 0 "
set wildignore+=*/tmp/*,*.o,*.so,*.swp,*.zip,*.jar,*.class,*.pdf,*.gif,*.png,*.jpg,*.o,*.hi "
if executable("ag")
  set grepprg=ag\ --nogroup\ --nocolor
  let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
else
  let g:ctrlp_user_command = ['.git', 'cd %s && git ls-files . -co --exclude-standard', 'find %s -type f']
  let g:ctrlp_prompt_mappings = {
        \ 'AcceptSelection("e")': ['<space>', '<cr>', '<2-LeftMouse>'],
        \ }
endif

if executable('matcher')
    let g:ctrlp_match_func = { 'match': 'GoodMatch' }

    function! GoodMatch(items, str, limit, mmode, ispath, crfile, regex)

      " Create a cache file if not yet exists
      let cachefile = ctrlp#utils#cachedir().'/matcher.cache'
      if !( filereadable(cachefile) && a:items == readfile(cachefile) )
        call writefile(a:items, cachefile)
      endif
      if !filereadable(cachefile)
        return []
      endif

      " a:mmode is currently ignored. In the future, we should probably do
      " something about that. the matcher behaves like "full-line".
      let cmd = 'matcher --limit '.a:limit.' --manifest '.cachefile.' '
      if !( exists('g:ctrlp_dotfiles') && g:ctrlp_dotfiles )
        let cmd = cmd.'--no-dotfiles '
      endif
      let cmd = cmd.a:str

      return split(system(cmd), "\n")

    endfunction
end

"Easymotion "
let g:EasyMotion_do_mapping = 0 " Disable default mappings
let g:EasyMotion_smartcase = 1
" nmap <BACKSPACE> <Plug>(easymotion-overwin-f)
" nmap <Leader>f <Plug>(easymotion-prefix)
" nmap <Leader>j <Plug>(easymotion-j)
" nmap <Leader>k <Plug>(easymotion-k)
" nmap <Leader>s <Plug>(easymotion-overwin-f2)
" nmap <Leader>d <Plug>(easymotion-s2)
" nmap <Leader>n <Plug>(easymotion-next)
" nmap <Leader>N <Plug>(easymotion-previous)

"Airline "
set laststatus=2   " Always show the statusline "
set noshowmode " Hide the default mode text (e.g. -- INSERT -- below the statusline) "
let g:airline_powerline_fonts=1
let g:airline_theme='serene'
let g:airline#extensions#tabline#enabled = 1
let g:airline_section_y='%{ObsessionStatus()}'

"Tmuxline "
let g:airline#extensions#tmuxline#enabled = 1
let g:tmuxline_preset = {
      \'a' : '#S',
      \'win': ['#I', '#W'],
      \'cwin': ['#I', '#W'],
      \'x' : '#(cat ~/.thyme-tmux)',
      \'y' : ['%d-%b-%y %H:%M', '#(~/.rc/tmux/cpu.sh)%', '#(~/.rc/tmux/mem.sh)'],
      \'options': {'status-justify': 'left'}}


"Noob training "
noremap <up> <nop>
noremap <down> <nop>
noremap <left> <nop>
noremap <right> <nop>

nnoremap j gj
nnoremap k gk

" gundo "
nnoremap <Leader>u :GundoToggle<CR>

let g:ale_linters = {
\   'javascript': ['eslint'],
\}
let g:airline#extensions#ale#enabled = 1
" Write this in your vimrc file
let g:ale_lint_on_text_changed = 'never'
" You can disable this option too
" if you don't want linters to run on opening a file
let g:ale_lint_on_enter = 0

" Vim Fugitive "
nnoremap <Leader>g :Gstatus<CR>

" vimux "
function VimuxMakeRun()
  :VimuxInterruptRunner
  :VimuxInterruptRunner
  :VimuxRunCommand("clear;make")
endfunction
noremap <Leader>r :exec VimuxMakeRun()<CR>

" Word wrap w/o line breaks "
set wrap
set linebreak
set list
set nostartofline

" Nicer autocomplete commands "
set wildmode=longest:full
set wildmenu

" Screw backups "
set nobackup nowritebackup noswapfile

set colorcolumn=+1
set clipboard=unnamed

set fileformats=unix,dos,mac
scriptencoding utf-8
set encoding=utf-8

" Disable ex mode "
nnoremap Q <nop>

" folds! "
set foldenable
set foldmethod=syntax
set foldnestmax=2
set foldlevel=1
set foldlevelstart=1
set foldminlines=10
set fillchars=vert:\|,fold:\
noremap <Leader>f zR
" Toggle folds with space "
fu! ToggleFold()
  if foldlevel('.') == 0
    normal! l
  else
    if foldclosed('.') < 0
      . foldclose
    else
      . foldopen
    endif
  endif
  echo
endf
noremap <space> :call ToggleFold()<CR>

" ESFormatting "
" nnoremap <silent> <leader>es :Esformatter<CR>
" vnoremap <silent> <leader>es :EsformatterVisual<CR>
" 
" Prettier "
autocmd FileType javascript,javascript.jsx set formatprg=prettier\ --stdin\ --single-quote\ --trailing-comma\ es5\ --semi\ false
let g:neoformat_try_formatprg = 1

nnoremap <silent> <leader>f :Neoformat<CR>
" autocmd BufWritePre *.js Neoformat
" autocmd BufWritePre *.jsx Neoformat

"Easycommenting "
" autocmd FileType js,coffee,c,cpp,java,javascript let b:comment_leader = '// ' "
" autocmd FileType vim,rc let b:comment_leader = '" ' "
" autocmd FileType conf,fstab,ruby,python let b:comment_leader = '# ' "
" noremap <silent> <leader>cc :<C-B>silent <C-E>s/^/<C-R>=escape(b:comment_leader,'\/')<CR>/<CR>:nohlsearch<CR> "
" noremap <silent> <leader>cu :<C-B>silent <C-E>s/^\V<C-R>=escape(b:comment_leader,'\/')<CR>//e<CR>:nohlsearch<CR> "


" Taglist "
noremap <silent> <Leader>t :TlistToggle<CR>
let Tlist_Auto_Open=1
let Tlist_Exit_OnlyWindow=1

let g:ycm_rust_src_path = '/usr/local/rust/src'
let g:ycm_collect_identifiers_from_comments_and_strings = 1
let g:ycm_collect_identifiers_from_tags_files = 1
let g:ycm_seed_identifiers_with_syntax = 1
let g:ycm_autoclose_preview_window_after_insertion = 1
let g:ycm_add_preview_to_completeopt = 1

let g:elm_setup_keybindings = 0

let g:ycm_semantic_triggers = {
     \ 'elm' : ['.'],
     \}

let g:indent_guides_guide_size = 1
let g:indent_guides_color_change_percent = 3
let g:indent_guides_enable_on_vim_startup = 1
let g:jsx_ext_required = 0

let g:flow#enable = 1

let g:deoplete#enable_at_startup = 1

" Whether to include the types of the completions in the result data. Default: 0
let g:deoplete#sources#ternjs#types = 1

" Whether to include the distance (in scopes for variables, in prototypes for 
" properties) between the completions and the origin position in the result 
" data. Default: 0
let g:deoplete#sources#ternjs#depths = 1

" Whether to include documentation strings (if found) in the result data.
" Default: 0
let g:deoplete#sources#ternjs#docs = 1

" When on, only completions that match the current word at the given point will
" be returned. Turn this off to get all results, so that you can filter on the 
" client side. Default: 1
let g:deoplete#sources#ternjs#filter = 0

" Whether to use a case-insensitive compare between the current word and 
" potential completions. Default 0
let g:deoplete#sources#ternjs#case_insensitive = 1

" When completing a property and no completions are found, Tern will use some 
" heuristics to try and return some properties anyway. Set this to 0 to 
" turn that off. Default: 1
let g:deoplete#sources#ternjs#guess = 0

" Determines whether the result set will be sorted. Default: 1
let g:deoplete#sources#ternjs#sort = 0

" When disabled, only the text before the given position is considered part of 
" the word. When enabled (the default), the whole variable name that the cursor
" is on will be included. Default: 1
let g:deoplete#sources#ternjs#expand_word_forward = 0

" Whether to ignore the properties of Object.prototype unless they have been 
" spelled out by at least two characters. Default: 1
let g:deoplete#sources#ternjs#omit_object_prototype = 0

" Whether to include JavaScript keywords when completing something that is not 
" a property. Default: 0
let g:deoplete#sources#ternjs#include_keywords = 1

" If completions should be returned when inside a literal. Default: 1
let g:deoplete#sources#ternjs#in_literal = 0

"Add extra filetypes
let g:deoplete#sources#ternjs#filetypes = [
                \ 'jsx',
                \ 'javascript.jsx',
                \ 'vue',
                \ '...'
                \ ]

" Use tern_for_vim.
let g:tern#command = ["tern"]
let g:tern#arguments = ["--persistent"]
