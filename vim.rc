syntax on
set t_Co=256
set nocompatible
filetype off

" Vundle "
set rtp+=~/.vim/bundle/Vundle.vim/
call vundle#begin()
Plugin 'gmarik/Vundle.vim'

" Navigation "
Plugin 'kien/ctrlp.vim'
Plugin 'christoomey/vim-tmux-navigator'
Plugin 'benmills/vimux'
Plugin 'Lokaltog/vim-easymotion'
Plugin 'tpope/vim-vinegar'

" Color "
Plugin 'godlygeek/csapprox'
Plugin 'ap/vim-css-color'
Plugin 'nanotech/jellybeans.vim'
Plugin 'w0ng/vim-hybrid'
Plugin 'tpope/vim-vividchalk'
Plugin 'goatslacker/mango.vim'
Plugin 'sjl/badwolf'
Plugin 'flazz/vim-colorschemes'

" Search "
Plugin 'rking/ag.vim'

" Utilities "
" Plugin 'mhinz/vim-startify' "
Plugin 'sjl/gundo.vim'
Plugin 'tpope/vim-fugitive'
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
Plugin 'vim-scripts/gitignore'
Plugin 'airblade/vim-gitgutter'
Plugin 'tmux-plugins/vim-tmux-focus-events'
Plugin 'edkolev/tmuxline.vim'
Plugin 'tpope/vim-obsession'

" Editing "
Plugin 'tpope/vim-repeat'
Plugin 'tpope/vim-sensible'
Plugin 'tpope/vim-unimpaired'"
Plugin 'Valloric/YouCompleteMe'
Plugin 'scrooloose/syntastic'
Plugin 'myint/syntastic-extras'
" Plugin 'mattn/emmet-vim'
Plugin 'terryma/vim-multiple-cursors'
"  Plugin 'chrisbra/NrrwRgn'

" Tag Support "
Plugin 'vim-scripts/taglist.vim'
Plugin 'tmhedberg/matchit'
" Plugin 'tpope/vim-surround'

" Language support "
Plugin 'vim-ruby/vim-ruby'
Plugin 'vim-scripts/VimClojure'
Plugin 'kchmck/vim-coffee-script'
Plugin 'cakebaker/scss-syntax.vim'
Plugin 'moll/vim-node'
Plugin 'pangloss/vim-javascript'
Plugin 'burnettk/vim-angular'
Plugin 'elzr/vim-json'
Plugin 'millermedeiros/vim-esformatter'
Plugin 'marijnh/tern_for_vim'
Plugin 'sidorares/node-vim-debugger'
Plugin 'ekalinin/Dockerfile.vim'
Plugin 'leafgarland/typescript-vim'
Plugin 'rust-lang/rust.vim'

call vundle#end()

set t_Co=256
let g:rehash256 = 1 "

set background=dark
colorscheme bvemu

" hide the gui menubar "
if has('gui_running')
  set guioptions=egmr
  if has("mac")
    set guifont=Menlo\ for\ Powerline:h11
  else
    set guifont=Menlo\ for\ Powerline\ 10
  endif
endif

"Code handling "
syntax on
filetype plugin indent on
set title                " change the terminal's title "

"viminfo"
set viminfo='50,%,<1000,s100,:20,n~/.vim/viminfo
set showcmd

"Search help "
set incsearch ignorecase hlsearch
set autoread
set smartcase
set magic
set showmatch
set mat=2
set ai
set si
set wrap
set nu

"Compatibility "
set encoding=utf8
set shiftwidth=2 softtabstop=2 tabstop=2
"set smarttab " "use a mix of tabs and spaces"
set expandtab "always use spaces"

"Remove extra files "
set nobackup
set nowb
set noswapfile

"Contingencies "
set history=10000         " remember more commands and search history "
set undolevels=10000      " use many muchos levels of undo "
set wildignore=*.swp,*.bak,*.pyc,*.class
set hidden "Save buffers instead of closing "

"Fix annoying "
set visualbell           " don't beep "
set noerrorbells         " don't beep "
set pastetoggle=<F2>

"Quicker command entry "
nnoremap ; :

"Customization and plugin mapping "
let mapleader=","

"Ctrlp "
noremap <Leader>b <ESC>:CtrlPBuffer<CR>
noremap <Leader><SPACE> <ESC>:CtrlPMRUFiles<CR>
let g:ctrlp_working_path_mode = 'ra'
let g:ctrlp_use_caching = 0
let g:ctrlp_custom_ignore = '\v[\/](_build|(\.(git|hg|svn)))$'
let g:ctrlp_max_depth = 10
let g:ctrlp_max_files = 0 "
set wildignore+=*/tmp/*,*.o,*.so,*.swp,*.zip,*.jar,*.class,*.pdf,*.gif,*.png,*.jpg,*.o,*.hi "
if executable("ag")
  set grepprg=ag\ --nogroup\ --nocolor
  let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
else
  let g:ctrlp_user_command = ['.git', 'cd %s && git ls-files . -co --exclude-standard', 'find %s -type f']
  let g:ctrlp_prompt_mappings = {
        \ 'AcceptSelection("e")': ['<space>', '<cr>', '<2-LeftMouse>'],
        \ }
endif

"Easymotion "
nnoremap <Leader>f <Plug>(easymotion-prefix)
nnoremap <Leader>n <Plug>(easymotion-j)
nnoremap <Leader>e <Plug>(easymotion-k)
nnoremap <Leader>s <Plug>(easymotion-s)
nnoremap <Leader>d <Plug>(easymotion-s2)

"Airline "
set laststatus=2   " Always show the statusline "
set noshowmode " Hide the default mode text (e.g. -- INSERT -- below the statusline) "
let g:airline_powerline_fonts=1
let g:airline_theme='tomorrow'
let g:airline#extensions#tabline#enabled = 1
let g:airline_section_y='%{ObsessionStatus()}'

"Tmuxline "
let g:airline#extensions#tmuxline#enabled = 1
let g:tmuxline_preset = {
      \'a' : '#S',
      \'win': ['#I', '#W'],
      \'cwin': ['#I', '#W'],
      \'x' : '#(cat ~/.thyme-tmux)',
      \'y' : ['%d-%b-%y %H:%M', '#(~/.rc/tmux/cpu.sh)%', '#(~/.rc/tmux/mem.sh)'],
      \'options': {'status-justify': 'left'}}


"Noob training "
noremap <up> <nop>
noremap <down> <nop>
noremap <left> <nop>
noremap <right> <nop>

" gundo "
nnoremap <Leader>u :GundoToggle<CR>

" Vim Fugitive "
nnoremap <Leader>g :Gstatus<CR>

" vimux "
function VimuxMakeRun()
  :VimuxInterruptRunner
  :VimuxInterruptRunner
  :VimuxRunCommand("clear;make run")
endfunction
noremap <Leader>r :exec VimuxMakeRun()<CR>

" Word wrap w/o line breaks "
set wrap
set linebreak
set list
set nostartofline

" Nicer autocomplete commands "
set wildmode=longest:full
set wildmenu

" Screw backups "
set nobackup nowritebackup noswapfile

set colorcolumn=+1
set clipboard=unnamed

set fileformats=unix,dos,mac
scriptencoding utf-8
set encoding=utf-8

" Disable ex mode "
nnoremap Q <nop>

" folds! "
set foldenable
set foldmethod=syntax
set foldnestmax=2
set foldlevel=1
set foldlevelstart=1
set foldminlines=10
set fillchars=vert:\|,fold:\
noremap <Leader>f zR
" Toggle folds with space "
fu! ToggleFold()
  if foldlevel('.') == 0
    normal! l
  else
    if foldclosed('.') < 0
      . foldclose
    else
      . foldopen
    endif
  endif
  echo
endf
noremap <space> :call ToggleFold()<CR>

" Systastic "
let g:syntastic_enable_signs=1
let g:syntastic_auto_loc_list=1
let g:syntastic_check_on_open=1
let g:syntastic_loc_list_height=5
let g:syntastic_always_populate_loc_list=1
let g:syntastic_javascript_checkers = ['json_tool']
let g:syntastic_make_checkers = ['gnumake']
noremap <Leader><Tab> :Errors<CR>


" ESFormatting "
nnoremap <silent> <leader>es :Esformatter<CR>
vnoremap <silent> <leader>es :EsformatterVisual<CR>

"Easycommenting "
autocmd FileType js,coffee,c,cpp,java,javascript let b:comment_leader = '// '
autocmd FileType vim,rc let b:comment_leader = '" ' "
autocmd FileType conf,fstab,ruby,python let b:comment_leader = '# '
noremap <silent> <leader>cc :<C-B>silent <C-E>s/^/<C-R>=escape(b:comment_leader,'\/')<CR>/<CR>:nohlsearch<CR>
noremap <silent> <leader>cu :<C-B>silent <C-E>s/^\V<C-R>=escape(b:comment_leader,'\/')<CR>//e<CR>:nohlsearch<CR>


" Taglist "
noremap <silent> <Leader>t :TlistToggle<CR>
let Tlist_Auto_Open=1
let Tlist_Exit_OnlyWindow=1

"Closure compiler "
let g:syntastic_javascript_checkers = ['gjslint','jshint']
let g:syntastic_aggregate_errors = 1
let g:syntastic_javascript_gjslint_quiet_messages = {
      \ "type": "style",
      \ "regex": 'Line too long' }

let g:ycm_rust_src_path = '/usr/local/rust/src'
