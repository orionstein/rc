if [[ $TERM == 'screen-256color' ]]; then
  export TERM='screen-256color'
fi
if [[ `uname` == 'Darwin' ]]; then
#  if [[ $TERM == "screen" && -z $REATTACHED ]]; then
#   export REATTACHED=1
#   exec reattach-to-user-namespace -l zsh
#  fi
  export IS_OSX=1
fi

function upsert_path {
  if [ "$(echo $PATH | grep $1)" = "" ]; then
    if [ $2 = "left" ]; then
      export PATH="$1:$PATH"
    else
      export PATH="$PATH:$1"
    fi
  fi
}

export RCDIR=$HOME/.rc
export TRIP_RCDIR=$HOME/.trip_rc

if [ $IS_OSX ]; then
  upsert_path '/usr/local/bin' left
  if [ -z "$(echo $PATH | grep -E '(^|:)/usr/local/bin:.*:/usr/bin(:|$)')" ]; then
    export PATH="/usr/local/bin":$PATH
  fi
  upsert_path "$HOME/.cabal/bin" left
  if [ -z "$(echo $PATH | grep -E '(^|:)\.cabal:.*:/usr/local/bin(:|$)')" ]; then
    export PATH="$HOME/.cabal/bin":$PATH
  fi
fi

if [ -d "$RCDIR/bin" ] ; then
  upsert_path "$RCDIR/bin" left
fi

if [ -d "$HOME/.cabal/bin" ] ; then
  upsert_path "$HOME/.cabal/bin" left
fi

export RVM_HOME=$HOME/.rvm

# rvm!
[[ -s "$RVM_HOME/scripts/rvm" ]] && . "$RVM_HOME/scripts/rvm"

export POWERLINE_DIR=$RCDIR/powerline
export ZSH=$RCDIR/submodules/oh-my-zsh.git
export ZSH_THEME="af-magic"

#plugins=(vi-mode rvm tmux)
plugins=(rvm tmux git node archlinux aws colorize ssh-agent)

source $RCDIR/submodules/oh-my-zsh.git/oh-my-zsh.sh
source $RCDIR/submodules/zsh-syntax-highlighting.git/zsh-syntax-highlighting.zsh
source $RCDIR/submodules/zsh-history-substring-search.git/zsh-history-substring-search.zsh
[[ -n "${key[Up]}"   ]] && bindkey "${key[Up]}"   history-substring-search-up
[[ -n "${key[Down]}" ]] && bindkey "${key[Down]}" history-substring-search-down
bindkey -M vicmd 'k' history-substring-search-up
bindkey -M vicmd 'j' history-substring-search-down
export PROMPT="$PROMPT%{$(echo "\a")%}"

# Time commands that take >10s to finish
export REPORTTIME=10

# ctrl+s shouldn't freeze
stty ixany
stty ixoff -ixon

setopt INC_APPEND_HISTORY

# vim stuff
#autoload -U edit-command-line
#zle -N edit-command-line
#bindkey -M vicmd v edit-command-line
#bindkey '^Xe' edit-command-line
export EDITOR="vim -X"

#fancy ctl-z for vim
fancy-ctrl-z () {
  if [[ $#BUFFER -eq 0 ]]; then
    BUFFER="fg"
      zle accept-line
  else
    zle push-input
      zle clear-screen
      fi
}
zle -N fancy-ctrl-z
bindkey '^Z' fancy-ctrl-z

# For tmux
export DISPLAY=:0.0
unset DBUS_SESSION_BUS_ADDRESS

# other cool keyboard shortcuts
bindkey '^Xp' push-line
zle -N rerun-with-sudo
bindkey '^Xx' rerun-with-sudo

# vim Mode
#bindkey -v

function rerun-with-sudo  {
  LBUFFER="sudo !!"
  zle accept-line
}

function get_diff_out {
  GIT_DIFF_OUT=~/diffs/`git branch --no-color | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/'`.diff 
}

function git_diff {
  get_diff_out
  if [ "$1" = "c" ]
  then
    rm -f $GIT_DIFF_OUT 2> /dev/null
    rm -f $GIT_DIFF_OUT.old 2> /dev/null
  fi
  cp "$GIT_DIFF_OUT" "$GIT_DIFF_OUT.old" 2> /dev/null
  git svn-diff > $GIT_DIFF_OUT
  if [ -e "$GIT_DIFF_OUT.old" ]
  then
    diff $GIT_DIFF_OUT.old $GIT_DIFF_OUT
  else
    cat $GIT_DIFF_OUT
  fi
}

function -- {
  popd
}

function tmd {
  tmux attach-session -dt $1
}

function tm {
  tmux attach-session -t $1
}

function suspend {
  sudo su -c 'gnome-screensaver-command --lock && dbus-send --system --print-reply --dest="org.freedesktop.UPower" /org/freedesktop/UPower org.freedesktop.UPower.Suspend'
}

function sst {
  svn stat --ignore-externals $@ | grep -v '^[?X]'
}

function scl {
  cl=$1
  shift
  if [ $ARGC -eq 0 ]; then
    sst --changelist $cl
  else
    svn $@ --changelist $cl
  fi
}

function lkill {
  kill -9 `ps | grep $1 | grep -v grep | awk '{print $1}'`
}

#oh-my-zsh git_prompt_info and git_prompt_status can be slow
function git_prompt_info() {
  ref=$(git symbolic-ref HEAD 2> /dev/null) || return
  echo "$ZSH_THEME_GIT_PROMPT_PREFIX${ref#refs/heads/}$ZSH_THEME_GIT_PROMPT_SUFFIX"
}

function git_prompt_status() {
}

function run_docker {
  sudo docker build -t ${PWD##*/} --rm=true .;
  sudo docker run -it --rm -p $1 --name ${PWD##*/}-run ${PWD##*/};
}

function build_docker {
  sudo docker build -t ${PWD##*/} --rm=true .;
  sudo docker run -it -d --name ${PWD##*/}-run ${PWD##*/};
  sudo rm -r $PWD/$1
  sudo docker cp ${PWD##*/}-run:/opt/build/$1 $PWD
  sudo docker stop ${PWD##*/}-run
  sudo docker rm ${PWD##*/}-run
  sudo docker rmi ${PWD##*/}
}

function upgrade_eslint {
  npm i -g eslint-plugin-react eslint-plugin-jsx-a11y eslint-plugin-babel eslint-plugin-mocha eslint-plugin-jest babel-eslint @rentpath/eslint-config-rentpath eslint-plugin-import
}

function upgrade_node_modules {
  npm i -g npm;
  npm i -g babel-cli commitizen create-react-app cz-lerna-changelog elm eslint esprint jq lerna neon neon-cli nexe node-gyp npm phantomjs-prebuilt pkg prettier serverless tern typescript webpack-stats-duplicates yarn tslint eslint-plugin-react eslint-plugin-jsx-a11y eslint-plugin-babel eslint-plugin-mocha eslint-plugin-jest babel-eslint @rentpath/eslint-config-rentpath eslint-plugin-import;
}

function upgrade_python {
  pip install --user --upgrade pip;
  pip list --outdated --format=freeze | grep -v '^\-e' | cut -d = -f 1  | xargs -n1 pip install --user -U;
}

function upgrade_stuff {
  sudo pacman -Syu --noconfirm;
  rustup update;
  upgrade_node_modules;
  upgrade_oh_my_zsh;
  upgrade_python;
  yaourt -Syu --devel --aur --m-arg --skipchecksums --m-arg --skippgpcheck;
}

alias lsdf='get_diff_out;cat ;echo ;'
alias rb='git svn rebase'
alias sdf=git_diff
alias up=run_docker
alias build=build_docker
alias vim='nvim'
alias vimrc='nvim $HOME/.vimrc'
alias wifi='sudo ip link set down wlp1s0; sudo ifconfig wlp1s0 down; sudo wifi-menu'
alias cleandockerimages="docker images | grep none | awk '{print $3}' | xargs docker rmi -f"
alias cleandockercontainers="docker ps -a | awk '{print $1}' | xargs docker rm -fv"
alias cleandockercontainersall="docker rm -fv $(docker ps -a -q)"
alias cleandockervolumes="docker volume ls -qf dangling=true | awk '{print $1}' | xargs docker volume rm"
alias cleandocker="cleandockercontainers;cleandockerimages;cleandockervolumes"
alias yu='sudo apt-get update && sudo apt-get upgrade'
alias xp='echo "WM_CLASS(STRING) = \"NAME\", \"CLASS\"" && xprop | grep "WM_WINDOW_ROLE\|WM_CLASS"'
alias todo="$HOME/software/todo.txt-cli/todo.sh"
alias vpn="$HOME/.rentjsvpn"
alias ack='ag'
alias upgrade=upgrade_stuff
alias glo='killall gnome-session'
alias tn='tmux -2 new -s base'
alias t='tmux -2 attach'
alias jsonlint='python -mjson.tool'
alias awsorion='export AWS_DEFAULT_PROFILE=orion'
alias awssp='export AWS_DEFAULT_PROFILE=startingpoints'
alias awskc='export AWS_DEFAULT_PROFILE=onion'

alias localenv="cp $HOME/envs/local-env $PWD/.envrc;direnv allow"
alias testenv="cp $HOME/envs/test-env $PWD/.envrc;direnv allow"
alias rpenv="cp $HOME/envs/rp-env $PWD/.envrc;direnv allow"

alias killnodewatchers="ps ax | ag 'node.*watch' | awk -F ' ' '{print $1}' | xargs kill -9"
alias runag="killnodewatchers;localenv;yarn run dev"
alias runagprod="killnodewatchers;localenv;yarn run dev"
alias testag="APPLICATIONS_AG_ASSET_PROTOCOL=https APPLICATIONS_AG_PROTOCOL=https yarn run test"

if [ $IS_OSX ]; then
  alias ls='ls -G'
  alias o=open
else
  alias ls='ls --color=auto'
  alias o=gnome-open
fi
alias ll='ls -lh'

if [ -d "$TRIP_RCDIR" ]; then
  upsert_path "$TRIP_RCDIR/bin" left
  source $TRIP_RCDIR/trip_zsh
else
  unset TRIP_RCDIR
fi

if [ -f "$HOME/.zsh.local" ]; then
  source $HOME/.zsh.local
fi

# Setting ag as the default source for fzf
export FZF_DEFAULT_COMMAND='ag -g ""'
# export FZF_DEFAULT_COMMAND='ag -l --path-to-ignore ~/.ignore --nocolor --hidden -g ""'
# export FZF_DEFAULT_COMMAND='rg --files --no-ignore --hidden --follow --glob "!.git/*"'

# To apply the command to CTRL-T as well
export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"

# Add RVM to PATH for scripting. Make sure this is the last PATH variable change.
export PATH="$PATH:$HOME/.rvm/bin"

export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

# tabtab source for serverless package
# uninstall by removing these lines or running `tabtab uninstall serverless`
[[ -f /Users/ofree/.nvm/versions/node/v9.7.0/lib/node_modules/serverless/node_modules/tabtab/.completions/serverless.zsh ]] && . /Users/ofree/.nvm/versions/node/v9.7.0/lib/node_modules/serverless/node_modules/tabtab/.completions/serverless.zsh
# tabtab source for sls package
# uninstall by removing these lines or running `tabtab uninstall sls`
[[ -f /Users/ofree/.nvm/versions/node/v9.7.0/lib/node_modules/serverless/node_modules/tabtab/.completions/sls.zsh ]] && . /Users/ofree/.nvm/versions/node/v9.7.0/lib/node_modules/serverless/node_modules/tabtab/.completions/sls.zsh

export PATH="$HOME/.yarn/bin:$HOME/.config/yarn/global/node_modules/.bin:$PATH"

eval "$(direnv hook zsh)"

[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh


# tabtab source for slss package
# uninstall by removing these lines or running `tabtab uninstall slss`
[[ -f /home/orion/.nvm/versions/node/v11.7.0/lib/node_modules/serverless/node_modules/tabtab/.completions/slss.zsh ]] && . /home/orion/.nvm/versions/node/v11.7.0/lib/node_modules/serverless/node_modules/tabtab/.completions/slss.zsh

export PATH=$PATH:/home/orion/bin

source '/home/orion/lib/azure-cli/az.completion'
